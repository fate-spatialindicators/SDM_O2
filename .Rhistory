facet_wrap(~year, ncol = 3) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish, name = bquote(pO[2])) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
# * 1000 b/c we are in UTM km for model fitting:
if(!use_jscope) {
xlimits = c(282853, 1025581)
ylimits = c(3549000, 5366000)
}
if(use_jscope) {
xlimits = c(283853, 459201)
ylimits = c(4762418, 5366000)
}
best_model <- readRDS("output/wc/model_8_sablefish.rds")
fit_sablefish <- predict(best_model,
newdata = dat,
return_tmb_object = F)
fit_sablefish$residuals <- dat$cpue_kg_km2 - exp(fit_sablefish$est)
fit_sablefish$residuals <- fit_sablefish$residuals / sd(fit_sablefish$residuals)
ggplot(us_coast_proj) + geom_sf() +
geom_point(data = fit_sablefish, aes(x = X * 1000, y = Y * 1000, col = residuals), alpha = 0.6, size = 0.5) +
facet_wrap(~year, ncol = 3) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_colour_viridis(limits = c(-0.75, 0.75),oob = scales::squish,name = "Standardized Residuals") +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
# load best model
m_po2 <- readRDS("output/wc/model_8_sablefish.rds") #
nd_temp <- data.frame(temp = seq(min(dat$temp), max(dat$temp), length.out = 100),
log_depth_scaled = 0,
log_depth_scaled2 = 0,
po2 = 0,
year = 2010L)
nd_temp <- convert_class(nd_temp)
nd_po2 <- data.frame(po2 = seq(min(dat$po2), max(dat$po2), length.out = 300),
temp = 0,
log_depth_scaled = 0,
log_depth_scaled2 = 0,
year = 2010L)
nd_po2 <- convert_class(nd_po2)
nd_depth <- data.frame(log_depth_scaled = seq(min(dat$log_depth_scaled), max(dat$log_depth_scaled), length.out = 100),
temp = 0,
po2 = 0,
year = 2010L)
nd_depth$log_depth_scaled2 <- nd_depth$log_depth_scaled ^2
nd_depth <- convert_class(nd_depth)
# predict to new data
p_temp <- predict(m_po2, newdata = nd_temp, se_fit = TRUE, re_form = NA)
p_o2 <- predict(m_po2, newdata = nd_po2, se_fit = TRUE, re_form = NA)
p_depth <- predict(m_po2, newdata = nd_depth, se_fit = TRUE, re_form = NA)
# plot predictions with uncertainty
z <- 1.645 # for 90% CI
plot_temp <- ggplot(p_temp, aes(back.convert(temp, attr(dat$temp, "scaled:center"), attr(dat$temp, "scaled:scale")), exp(est),
ymin = exp(est - z * est_se), ymax = exp(est + z * est_se))) +
geom_line() + geom_ribbon(alpha = 0.4) +
labs(x = "Temperature (Â°C)", y = NULL)
plot_o2 <- ggplot(p_o2, aes(back.convert(po2, attr(dat$po2, "scaled:center"), attr(dat$po2, "scaled:scale")), exp(est),
ymin = exp(est - z * est_se), ymax = exp(est + z * est_se))) +
geom_line() + geom_ribbon(alpha = 0.4) +
scale_y_continuous(limits = c(0, NA), expand = expansion(mult = c(0, 0.1))) +
labs(x = "Partial Pressure of Oxygen", y = bquote('Population Density'~(kg~km^-2)))
plot_depth <- ggplot(p_depth, aes(exp(back.convert(log_depth_scaled, attr(dat$log_depth_scaled, "scaled:center"), attr(dat$log_depth_scaled, "scaled:scale"))), exp(est),
ymin = exp(est - z * est_se), ymax = exp(est + z * est_se))) +
geom_line() + geom_ribbon(alpha = 0.4) +
scale_y_continuous(limits = c(0, NA), expand = expansion(mult = c(0, 0.1))) +
labs(x = "Bottom Depth (m)", y = NULL)
gridExtra::grid.arrange(plot_o2, plot_temp, plot_depth, nrow = 1, ncol = 3)
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = delta_predict, aes(x = X * 1000, y = Y * 1000, fill = delta)) +
facet_wrap(~year, ncol = 3) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(-1.5, 0), oob = scales::squish, name = "log Effect Size") +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_sablefish__effect_size.R')
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_sablefish__effect_size.R')
delta_predict <- readRDS("output/wc/delta_predict.rds")
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = delta_predict, aes(x = X * 1000, y = Y * 1000, fill = delta)) +
facet_wrap(~year, ncol = 3) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(-1.5, 0), oob = scales::squish, name = "log Effect Size") +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
# * 1000 b/c we are in UTM km for model fitting:
if(!use_jscope) {
xlimits = c(282853, 1025581)
ylimits = c(3549000, 5366000)
}
if(use_jscope) {
xlimits = c(283853, 459201)
ylimits = c(4762418, 5366000)
}
best_model <- readRDS("output/wc/model_8_sablefish.rds")
fit_sablefish <- predict(best_model,
newdata = dat,
return_tmb_object = F)
fit_sablefish$residuals <- dat$cpue_kg_km2 - exp(fit_sablefish$est)
fit_sablefish$residuals <- fit_sablefish$residuals / sd(fit_sablefish$residuals)
ggplot(us_coast_proj) + geom_sf() +
geom_point(data = fit_sablefish, aes(x = X * 1000, y = Y * 1000, col = residuals), alpha = 0.6, size = 0.5) +
facet_wrap(~year, ncol = 3) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_colour_viridis(limits = c(-0.75, 0.75),oob = scales::squish,name = "Standardized Residuals") +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
map_data <- rnaturalearth::ne_countries(scale = "large", returnclass = "sf")
# crop if you want; not needed:
us_coast <- st_crop(map_data,
c(xmin = -126, ymin = 31, xmax = -110, ymax = 50))
us_coast_proj <- sf::st_transform(us_coast, crs = 32610)
# * 1000 b/c we are in UTM km for model fitting:
if(!use_jscope) {
xlimits = c(282853, 1025581)
ylimits = c(3549000, 5366000)
}
if(use_jscope) {
xlimits = c(283853, 459201)
ylimits = c(4762418, 5366000)
}
best_model <- readRDS("output/wc/model_8_sablefish.rds")
fit_sablefish <- predict(best_model,
newdata = dat,
return_tmb_object = F)
fit_sablefish$residuals <- dat$cpue_kg_km2 - exp(fit_sablefish$est)
fit_sablefish$residuals <- fit_sablefish$residuals / sd(fit_sablefish$residuals)
ggplot(us_coast_proj) + geom_sf() +
geom_point(data = fit_sablefish, aes(x = X * 1000, y = Y * 1000, col = residuals), alpha = 0.6, size = 0.5) +
facet_wrap(~year, ncol = 3) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_colour_viridis(limits = c(-0.75, 0.75),oob = scales::squish,name = "Standardized Residuals") +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_mi_prediction.R')
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/calc_sablefish_metabolic_index.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/calc_sablefish_metabolic_index.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/calc_sablefish_metabolic_index.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/calc_sablefish_metabolic_index.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_mi_vs_catchrate.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_mi_vs_catchrate.R', echo=TRUE)
dat[,1]
dat[1,]
help(DO.unit.convert)
library(rMR)
help(DO.unit.convert)
# calc o2 solubility, relies on o2 in umol/kg
gsw_O2sol_SP_pt <- function(sal,pt) {
x = sal
pt68 = pt*1.00024
y = log((298.15 - pt68)/(273.15 + pt68))
a0 =  5.80871
a1 =  3.20291
a2 =  4.17887
a3 =  5.10006
a4 = -9.86643e-2
a5 =  3.80369
b0 = -7.01577e-3
b1 = -7.70028e-3
b2 = -1.13864e-2
b3 = -9.51519e-3
c0 = -2.75915e-7
O2sol = exp(a0 + y*(a1 + y*(a2 + y*(a3 + y*(a4 + a5*y)))) + x*(b0 + y*(b1 + y*(b2 + b3*y)) + c0*x))
return(O2sol)
}
#O2 from trawl data is in ml/l - may need to be converted to umol/kg
gas_const = 8.31
partial_molar_vol = 0.000032
kelvin = 273.15
boltz = 0.000086173324
dat$sal[1]
dat$salinity[1]
dat[1,]
dat <- readRDS("survey_data/joined_nwfsc_data.rds")
# analyze sablefish for years and hauls with adequate oxygen and temperature data, within range of occurrence
dat = dplyr::filter(dat, species == spc, year%in%seq(2010,2015))
if (constrain_latitude) dat <- dplyr::filter(dat, latitude_dd >=43)
# get julian day
dat$julian_day <- rep(NA, nrow(dat))
for (i in 1:nrow(dat)) dat$julian_day[i] <- as.POSIXlt(dat$date[i], format = "%Y-%b-%d")$yday
# create temporary data file, matching J-SCOPE extent, for model fitting
if(fit.model) {
# constraint to J-SCOPE extent
# UTM transformation
dat_ll = dat
coordinates(dat_ll) <- c("longitude_dd", "latitude_dd")
proj4string(dat_ll) <- CRS("+proj=longlat +datum=WGS84")
# convert to utm with spTransform
dat_utm = spTransform(dat_ll,
CRS("+proj=utm +zone=10 +datum=WGS84 +units=km"))
# convert back from sp object to data frame
dat$X <- as.data.frame(dat_utm)$longitude_dd
dat$Y <- as.data.frame(dat_utm)$latitude_dd
# scale depth and julian dat
dat$log_depth_scaled <- scale(log(dat$depth))
dat$log_depth_scaled2 <- dat$log_depth_scaled^2
dat$jday_scaled <- scale(dat$julian_day)
dat$jday_scaled2 <- dat$jday_scaled^2
# create temporary data file for fitting
fit_dat <- dplyr::filter(dat, !is.na(o2))
c_spde <-make_mesh(data = fit_dat, xy_cols = c("X", "Y"), n_knots = 250) # choose # knots
# fit dissolved oxygen
o2_model <-  sdmTMB(formula = o2 ~ -1 + log_depth_scaled + log_depth_scaled2
+  as.factor(year) + jday_scaled + jday_scaled2,
data = fit_dat,
time = "year", spde = c_spde, anisotropy = TRUE,
silent = TRUE, spatial_trend = FALSE, spatial_only = FALSE,
control = sdmTMBcontrol(step.min = 0.01, step.max = 1))
# get predictions
pred_o2 <- predict(o2_model,
newdata = dat,
return_tmb_object = F)
#impute missing values
index <- which(is.na(dat$o2))
dat$o2[index] <- pred_o2$est[index]
# impute salinity, following same steps
sal_model <- sdmTMB(formula = o2 ~ -1 + log_depth_scaled + log_depth_scaled2
+  as.factor(year) + jday_scaled + jday_scaled2,
data = fit_dat,
time = "year", spde = c_spde, anisotropy = TRUE,
silent = TRUE, spatial_trend = FALSE, spatial_only = FALSE,
control = sdmTMBcontrol(step.min = 0.01, step.max = 1)
)
pred_sal <- predict(sal_model,
newdat = dat,
return_tmb_object = F)
index <- which(is.na(dat$sal))
dat$sal[index] <- pred_sal$est[index]
}
#O2 from trawl data is in ml/l
# just in case, remove any missing or nonsense values from sensors
dat <- dplyr::filter(dat, !is.na(o2), !is.na(sal), !is.na(temp), is.finite(sal))
dat[1,]
sal = 33.5507
o2 = 1.884
temp = 7.474
#calculate percent saturation for O2 - assumes  units of mL O2/L
# Input:       S = Salinity (pss-78)
#              T = Temp (deg C) ! use potential temp
#depth is in meters
#[umole/kg] = [ml/L]*44660/(sigmatheta(P=0,theta,S) + 1000)
dat$SA = gsw_SA_from_SP(dat$sal,dat$depth,dat$longitude_dd,dat$latitude_dd) #absolute salinity for pot T calc
dat$pt = gsw_pt_from_t(dat$SA,dat$temp,dat$depth) #potential temp at a particular depth
dat$CT = gsw_CT_from_t(dat$SA,dat$temp,dat$depth) #conservative temp
dat$sigma0 = gsw_sigma0(dat$SA,dat$CT)
dat$o2_umolkg = dat$o2*44660/(dat$sigma0+1000)
dat$O2_Sat0 = gsw_O2sol_SP_pt(dat$sal,dat$pt)
View(dat)
#= o2satv2a(sal,pt) #uses practical salinity and potential temp - solubity at p =1 atm
dat$press = exp(dat$depth*10000*partial_molar_vol/gas_const/(dat$temp+kelvin))
View(dat)
dat$O2_satdepth = dat$O2_Sat0*dat$press
#solubility at p=0
dat$sol0 = dat$O2_Sat0/0.209
dat$sol_Dep = dat$sol0*dat$press
dat$po2 = dat$o2_umolkg/dat$sol_Dep
knitr::opts_chunk$set(echo = TRUE)
source("code/mi_functions.R")
formulas <- get_models()
library(sdmTMB)
library(raster)
library(dplyr)
library(sp)
library(gsw)
library(gsw)
library(rgdal)
library(future)
require(rnaturalearth)
require(rnaturalearthdata)
require(rnaturalearthhires)
require(ggplot2)
library(viridis)
library(sf)
library(gridExtra)
library(egg)
library(lme4)
library(lme4)
source("mi_functions.R")
m_df <- get_models()
AICmat <- matrix(NA, nrow = 9, ncol = 1)
for (i in 1:length(m_df)) {
if (no_depth)
filename <- paste0("output/wc/model_", i, "_", spc, "_nodepth.rds")
if (!no_depth)
filename <- paste0("output/wc/model_", i, "_", spc, ".rds")
m <- readRDS(filename)
AICmat[i, 1] <- AIC(m)
}
m_df <- get_models()
AICmat <- matrix(NA, nrow = 9, ncol = 1)
for (i in 1:length(m_df)) {
filename <- paste0("output/wc/model_", i, "_", spc, ".rds")
m <- readRDS(filename)
AICmat[i, 1] <- AIC(m)
}
# calculate and print out delta AIC table
addn.predictors <- rep(NA, length(m_df))
addn.predictors[1] <- "none"
for (i in 2:length(m_df)) {
addn.predictors[i] <- gsub(
pattern = "log_depth_scaled + log_depth_scaled2  + as.factor(year) +",
x = m_df[i],
replacement = "",
fixed = T
)
}
dAIC <- data.frame("Additional Predictors" = addn.predictors,
"DeltaAIC" =  AICmat[, 1] - min(AICmat[, 1]))
colnames <- c("Additional Predictors", '$\\Delta\\text{AIC}$')
knitr::kable(dAIC, col.names = colnames, caption = "Model selection using AIC")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning  = FALSE)
# load best model
m_po2 <- readRDS("output/wc/model_8_sablefish.rds") #
nd_temp <- data.frame(temp = seq(min(dat$temp), max(dat$temp), length.out = 100),
log_depth_scaled = 0,
log_depth_scaled2 = 0,
po2 = 0,
year = 2010L)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning  = FALSE)
source("code/mi_functions.R")
formulas <- get_models()
library(sdmTMB)
library(raster)
library(dplyr)
library(sp)
library(gsw)
library(rgdal)
library(future)
require(rnaturalearth)
require(rnaturalearthdata)
require(rnaturalearthhires)
require(ggplot2)
library(viridis)
library(sf)
library(gridExtra)
library(egg)
library(lme4)
spc <- "sablefish"
fit.model <- F # do you want to fit SDM to environmental variables and impute missing values?
years <- 2010:2015 # designate years to use, must be 2010:2015 if using trawl-based data
constrain_latitude <- F # do you want to constraint trawl data N of 43 degrees latitude
compare_sources <- F # do you want to run models comparing trawl and J-SCOPE covariates?
no_depth <- FALSE # Do you want to run models w/out a depth effect?
use_cv = FALSE # specify whether to do cross validation or not
use_AIC = TRUE # specify whether to use AIC
use_jscope <- F # specify whether to only use J-SCOPE based estimates.  Overrides compare_sources and fit.model
fit_new <- F
years.2.plot <- years
# get list of models.  if use_scope is T, then always use "get_models()".
m_df <- get_models()
AICmat <-
dAIC <-
matrix(NA, nrow = length(m_df), ncol = 1) # set up array for output
rownames(AICmat) <- rownames(dAIC) <- m_df
dat <- load_data(fit.model, spc, constrain_latitude)
dat$temp <- (scale(dat$temp))
dat$mi <- (scale(dat$mi))
dat$po2 <- (scale(dat$po2))
dat$log_depth_scaled <- scale(log(dat$depth))
dat$log_depth_scaled2 <- with(dat, log_depth_scaled ^ 2)
dat$jday_scaled <- scale(dat$julian_day)
dat$jday_scaled2 <- with(dat, jday_scaled ^ 2)
dat$X <- dat$longitude
dat$Y <- dat$latitude
# make year a factor
dat$year <- as.factor(dat$year)
#### Prepare plot
df <- readRDS("output/wc_grid_df.rds")
po2_model <- readRDS("output/wc/po2_model.rds")
df$year <- as.factor(df$year)
df$log_depth_scaled <- as(df$log_depth_scaled, Class = "matrix")
df$log_depth_scaled2 <- as(df$log_depth_scaled2, Class = "matrix")
df$jday_scaled <- as(df$jday_scaled, Class = "matrix")
df$jday_scaled2 <- as(df$jday_scaled2, Class = "matrix")
# load best model
m_po2 <- readRDS("output/wc/model_8_sablefish.rds") #
nd_temp <- data.frame(temp = seq(min(dat$temp), max(dat$temp), length.out = 100),
log_depth_scaled = 0,
log_depth_scaled2 = 0,
po2 = 0,
year = 2010L)
nd_temp <- convert_class(nd_temp)
nd_po2 <- data.frame(po2 = seq(min(dat$po2), max(dat$po2), length.out = 300),
temp = 0,
log_depth_scaled = 0,
log_depth_scaled2 = 0,
year = 2010L)
nd_po2 <- convert_class(nd_po2)
nd_depth <- data.frame(log_depth_scaled = seq(min(dat$log_depth_scaled), max(dat$log_depth_scaled), length.out = 100),
temp = 0,
po2 = 0,
year = 2010L)
nd_depth$log_depth_scaled2 <- nd_depth$log_depth_scaled ^2
nd_depth <- convert_class(nd_depth)
# predict to new data
p_temp <- predict(m_po2, newdata = nd_temp, se_fit = TRUE, re_form = NA)
p_o2 <- predict(m_po2, newdata = nd_po2, se_fit = TRUE, re_form = NA)
p_depth <- predict(m_po2, newdata = nd_depth, se_fit = TRUE, re_form = NA)
# plot predictions with uncertainty
z <- 1.645 # for 90% CI
plot_temp <- ggplot(p_temp, aes(back.convert(temp, attr(dat$temp, "scaled:center"), attr(dat$temp, "scaled:scale")), exp(est),
ymin = exp(est - z * est_se), ymax = exp(est + z * est_se))) +
geom_line() + geom_ribbon(alpha = 0.4) +
labs(x = "Temperature (Â°C)", y = NULL) +
lims(y = c(0, 1500)) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
plot_o2 <- ggplot(p_o2, aes(back.convert(po2, attr(dat$po2, "scaled:center"), attr(dat$po2, "scaled:scale")), exp(est),
ymin = exp(est - z * est_se), ymax = exp(est + z * est_se))) +
geom_line() + geom_ribbon(alpha = 0.4) +
scale_y_continuous(limits = c(0, NA), expand = expansion(mult = c(0, 0.1))) +
labs(x = bquote(pO[2]), y = bquote('Population Density'~(kg~km^-2))) +
lims(y = c(0, 1500)) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
plot_depth <- ggplot(p_depth, aes(exp(back.convert(log_depth_scaled, attr(dat$log_depth_scaled, "scaled:center"), attr(dat$log_depth_scaled, "scaled:scale"))), exp(est),
ymin = exp(est - z * est_se), ymax = exp(est + z * est_se))) +
geom_line() + geom_ribbon(alpha = 0.4) +
scale_y_continuous(limits = c(0, NA), expand = expansion(mult = c(0, 0.1))) +
labs(x = "Bottom Depth (m)", y = NULL) +
lims(y = c(0, 1500)) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
multipanel <- gridExtra::grid.arrange(plot_o2, plot_temp, plot_depth, nrow = 1, ncol = 3)
m_po2 <- readRDS("output/wc/model_9_sablefish.rds")
summary(m_po2)
back.convert(0.08, attr(dat$mi, "scaled:center"),attr(dat$mi, "scaled:scale")
)
