bathy_hiRes <- bathy_hiRes / 10 # units were originally decimeters, so convert to meters
# aggregate and project bathymetry to survey grid cells, the absolute minimum resolution of the prediction grid
bathy_raster <- projectRaster(bathy_hiRes, predict_raster, crs = newproj, method="bilinear")
# load Cowcod Conservation Areas, not included in trawl survey, and reproject
CCA = rgdal::readOGR('data/data/kv299cy7357.shp')
CCA = sp::spTransform(CCA, sp::CRS(newproj))
# mask CCA from bathymetry raster used for prediction
bathy_raster = raster::mask(bathy_raster, CCA, inverse = TRUE)
# create matrix of point data with coordinates and depth from raster
wc_grid <- as.data.frame(rasterToPoints(bathy_raster))
colnames(wc_grid) = c("X", "Y", "depth")
# scale covariates
wc_grid$log_depth_scaled <- (log(wc_grid$depth * -1) - mean.depth) / sd.depth
wc_grid$log_depth_scaled2 <- wc_grid$log_depth_scaled ^ 2
wc_grid$X <- wc_grid$X/1000
wc_grid$Y <- wc_grid$Y/1000
wc_grid$loc = seq(1,nrow(wc_grid))
# Create dataframe for fitting
df = expand.grid(loc=unique(wc_grid$loc),
year = unique(dat$year))
df = left_join(df,wc_grid)
df$jday_scaled = 0
df$jday_scaled2 = 0
saveRDS(df, file = "output/wc_grid_df.rds")
pred_po2 <- predict(po2_model,
newdata = df,
return_tmb_object = F)
# convert estimate (which is scaled) to original po2 units
pred_po2$po2 <- pred_po2$est *std.po2 + mean.po2
# sean's code
map_data <- rnaturalearth::ne_countries(scale = "large", returnclass = "sf")
# crop if you want; not needed:
us_coast <- st_crop(map_data,
c(xmin = -126, ymin = 31, xmax = -110, ymax = 50))
us_coast_proj <- sf::st_transform(us_coast, crs = 32610)
# * 1000 b/c we are in UTM km for model fitting:
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = c(282853, 1025581)) +
ylim(3549000, 5366000) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
min(dat$latitude)
max(dat$longitude)
min(dat$longitude)
if(use_jscope) {
xlimits = c(283853, 419201)
ylimits = c(4762418, 5366000)
}
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
if(use_jscope) {
xlimits = c(283853, 429201)
ylimits = c(4762418, 5366000)
}
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
if(use_jscope) {
xlimits = c(283853, 459201)
ylimits = c(4762418, 5366000)
}
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_oxygen_prediction.R', echo=TRUE)
plotfilename("plots/po2_map.pdf")
pdf(file = plotfilename,
height = 3,
width = 6
)
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
dev.off()
system2("open", args = c("-a Skim.app", plotfilename))
plotfilename<-"plots/po2_map.pdf"
pdf(file = plotfilename,
height = 3,
width = 6
)
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
dev.off()
system2("open", args = c("-a Skim.app", plotfilename))
-"plots/po2_map.pdf"
pdf(file = plotfilename,
height = 4,
width = 8
)
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
dev.off()
system2("open", args = c("-a Skim.app", plotfilename))
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_oxygen_prediction.R', echo=TRUE)
df <- dplyr::filter(df, year %in% years.2.plot)
pred_po2 <- predict(po2_model,
newdata = df,
return_tmb_object = F)
# convert estimate (which is scaled) to original po2 units
pred_po2$po2 <- pred_po2$est *std.po2 + mean.po2
# sean's code
map_data <- rnaturalearth::ne_countries(scale = "large", returnclass = "sf")
# crop if you want; not needed:
us_coast <- st_crop(map_data,
c(xmin = -126, ymin = 31, xmax = -110, ymax = 50))
us_coast_proj <- sf::st_transform(us_coast, crs = 32610)
# * 1000 b/c we are in UTM km for model fitting:
if(!use_jscope) {
xlimits = c(282853, 1025581)
ylimits = c(3549000, 5366000)
}
if(use_jscope) {
xlimits = c(283853, 459201)
ylimits = c(4762418, 5366000)
}
plotfilename<-"plots/po2_map.pdf"
pdf(file = plotfilename,
height = 4,
width = 8
)
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
dev.off()
system2("open", args = c("-a Skim.app", plotfilename))
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_oxygen_prediction.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_oxygen_prediction.R', echo=TRUE)
years.2.plot <- c(2010,2015)
if(!fit_new_po2_model) df <- readRDS("output/wc_grid_df.rds")
df <- dplyr::filter(df, year %in% years.2.plot)
pred_po2 <- predict(po2_model,
newdata = df,
return_tmb_object = F)
# convert estimate (which is scaled) to original po2 units
pred_po2$po2 <- pred_po2$est *std.po2 + mean.po2
# sean's code
map_data <- rnaturalearth::ne_countries(scale = "large", returnclass = "sf")
# crop if you want; not needed:
us_coast <- st_crop(map_data,
c(xmin = -126, ymin = 31, xmax = -110, ymax = 50))
us_coast_proj <- sf::st_transform(us_coast, crs = 32610)
# * 1000 b/c we are in UTM km for model fitting:
if(!use_jscope) {
xlimits = c(282853, 1025581)
ylimits = c(3549000, 5366000)
}
if(use_jscope) {
xlimits = c(283853, 459201)
ylimits = c(4762418, 5366000)
}
plotfilename<-"plots/po2_map.pdf"
pdf(file = plotfilename,
height = 4,
width = 8
)
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
dev.off()
system2("open", args = c("-a Skim.app", plotfilename))
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_oxygen_prediction.R', echo=TRUE)
plotfilename<-"plots/po2_map.pdf"
pdf(file = plotfilename,
height = 4,
width = 8
)
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish, name = bquote("p"~O[2])) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
dev.off()
system2("open", args = c("-a Skim.app", plotfilename))
plotfilename<-"plots/po2_map.pdf"
pdf(file = plotfilename,
height = 4,
width = 8
)
ggplot(us_coast_proj) + geom_sf() +
geom_raster(data = pred_po2, aes(x = X * 1000, y = Y * 1000, fill = po2)) +
facet_wrap(~year, ncol = 6) +
scale_x_continuous(breaks = c(-125, -120), limits = xlimits) +
ylim(ylimits[1], ylimits[2]) +
scale_fill_viridis_c(limits = c(0.0, 0.1), oob = scales::squish, name = bquote(pO[2])) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line = element_line(color = "black")) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title= element_text(size = 14))
dev.off()
system2("open", args = c("-a Skim.app", plotfilename))
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/run_wc_models.R', echo=TRUE)
i=2
filename <- paste0("output/wc/model_", i, "_", spc, ".rds")
m <- readRDS(filename)
summary(m)
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_oxygen_prediction.R', echo=TRUE)
plot(dat$depth, dat$po2)
ggplot(dat, aes(x = depth, y = po2, col = year))
ggplot(dat, geom_point(aes(x = depth, y = po2, col = year)))
ggplot(dat, aes(x = depth, y = po2, col = year))
help(ggplot)
ggplot(dat, aes(x = depth, y = po2, col = year)) + geom_point()
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_oxygen_prediction.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/run_wc_models.R', echo=TRUE)
i
get_models <- function() {
formula <- c("log_depth_scaled + log_depth_scaled2 + as.factor(year)",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + temp",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + po2",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + mi",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + temp + po2",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + temp + po2 + temp * po2",
"breakpt(log_depth_scaled) + log_depth_scaled2 + as.factor(year) + breakpt(po2)",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + breakpt(po2) + temp",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + breakpt(mi)"
)
}
m_df <- get_models()
print(paste0("model # ", i, " of ", length(m_df)))
formula = paste0("cpue_kg_km2 ~ -1 +", m_df[i])
m <- try(sdmTMB(
formula = as.formula(formula),
data = dat,
time = NULL,
reml = TRUE,
spde = spde,
family = tweedie(link = "log"),
anisotropy = TRUE,
spatial_only = TRUE
),
silent = TRUE)
formula = paste0("cpue_kg_km2 ~ -1 +", m_df[i])
formula
m <- try(sdmTMB(
formula = as.formula(formula),
data = dat,
time = NULL,
reml = TRUE,
spde = spde,
family = tweedie(link = "log"),
anisotropy = TRUE,
spatial_only = TRUE
),
silent = TRUE)
print(paste0("model # ", i, " of ", length(m_df)))
formula = paste0("cpue_kg_km2 ~ -1 +", m_df[i])
formula
m <- try(sdmTMB(
formula = as.formula(formula),
data = dat,
time = NULL,
reml = TRUE,
spde = spde,
family = tweedie(link = "log"),
anisotropy = TRUE,
spatial_only = TRUE
),
silent = TRUE)
m <- sdmTMB(
formula = as.formula(formula),
data = dat,
time = NULL,
reml = TRUE,
spde = spde,
family = tweedie(link = "log"),
anisotropy = TRUE,
spatial_only = TRUE
)
get_models <- function() {
formula <- c("log_depth_scaled + log_depth_scaled2 + as.factor(year)",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + temp",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + po2",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + mi",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + temp + po2",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + temp + po2 + temp * po2",
"breakpt(log_depth_scaled) + log_depth_scaled2 + as.factor(year) + po2",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + breakpt(po2) + temp",
"log_depth_scaled + log_depth_scaled2 + as.factor(year) + breakpt(mi)"
)
}
m_df <- get_models()
print(paste0("model # ", i, " of ", length(m_df)))
formula = paste0("cpue_kg_km2 ~ -1 +", m_df[i])
formula
m <- try(sdmTMB(
formula = as.formula(formula),
data = dat,
time = NULL,
reml = TRUE,
spde = spde,
family = tweedie(link = "log"),
anisotropy = TRUE,
spatial_only = TRUE
),
silent = TRUE)
class(m)
if (!no_depth)
saveRDS(m, file = paste0("output/wc/model_", i, "_", spc, ".rds"))
if (class(m) != "try-error") {
if (no_depth)
saveRDS(m, file = paste0("output/wc/model_", i, "_", spc, "_nodepth.rds"))
if (!no_depth)
saveRDS(m, file = paste0("output/wc/model_", i, "_", spc, ".rds"))
}
# If using AIC, calculate AIC and dAIC ------------------------------------
if (use_AIC) {
for (i in 1:length(m_df)) {
if (no_depth)
filename <- paste0("output/wc/model_", i, "_", spc, "_nodepth.rds")
if (!no_depth)
filename <- paste0("output/wc/model_", i, "_", spc, ".rds")
m <- readRDS(filename)
AICmat[i, 1] <- AIC(m)
}
}
dAIC[, 1] <- AICmat[, 1] - min(AICmat[, 1])
dAIC[, 1] <- as.numeric(sprintf(dAIC, fmt = '%.2f'))
print(spc)
dAIC
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/plot_oxygen_prediction.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/run_wc_models.R', echo=TRUE)
m_df
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/run_wc_models.R', echo=TRUE)
m <- sdmTMB(
formula = as.formula(formula),
data = dat,
time = NULL,
reml = TRUE,
spde = spde,
family = tweedie(link = "log"),
anisotropy = TRUE,
spatial_only = TRUE)
source('~/Dropbox/Desktop/Rcode/SDM_O2/code/run_wc_models.R', echo=TRUE)
i=3
if (!no_depth)
filename <- paste0("output/wc/model_", i, "_", spc, ".rds")
m <- readRDS(filename)
summary(m)
install.packages("rgdal")
source("code/mi_functions.R")
library(sdmTMB)
library(raster)
library(dplyr)
library(sp)
library(gsw)
library(rgdal)
library(future)
library(ggplot2)
# Set Run Specifications --------------------------------------------------
spc <- "longspine thornyhead"
fit.model <- F # do you want to fit SDM to environmental variables and impute missing values?
years <- 2010:2015 # designate years to use, must be 2010:2015 if using trawl-based data
constrain_latitude <- F # do you want to constraint trawl data N of 43 degrees latitude
compare_sources <- F # do you want to run models comparing trawl and J-SCOPE covariates?
no_depth <- FALSE # Do you want to run models w/out a depth effect?
use_cv = FALSE # specify whether to do cross validation or not
use_AIC = TRUE # specify whether to use AIC
use_jscope <- T # specify whether to only use J-SCOPE based estimates.  Overrides compare_sources and fit.model
dat <- load_data_jscope(spc, years)
dat$temp <- as.numeric(scale(dat$temp))
dat$mi <- as.numeric(scale(dat$mi))
ggplot(dat, aes(x = depth, y = po2, col = year)) + geom_point()
dat <- load_data(fit.model, spc, constrain_latitude)
constrain_latitude <- T # do you want to constraint trawl data N of 43 degrees latitude
dat <- load_data(fit.model, spc, constrain_latitude)
ggplot(dat, aes(x = depth, y = po2, col = year)) + geom_point()
